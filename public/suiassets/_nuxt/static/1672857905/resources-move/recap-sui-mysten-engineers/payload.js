__NUXT_JSONP__("/resources-move/recap-sui-mysten-engineers", (function(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o){return {data:[{pageTitle:"Recap 8\u002F10 Move AMA: Move Programming Language with Mysten Engineers",excerpt:"Move is an evolution of ideas that were present in the first generation of smart contract languages. So, it's similar to evolution in terms of thinking about safety and security that happened between C and even C++ languages that were developed and implemented. ",pageContent:"\u003Ch4\u003E\u003Cspan style=\"background-color:transparent;color:#000000;\"\u003E\u003Cstrong\u003EIntroduction:\u003C\u002Fstrong\u003E\u003C\u002Fspan\u003E\u003C\u002Fh4\u003E\u003Cp\u003E\u003Cspan style=\"background-color:transparent;color:#000000;\"\u003E\u003Cstrong\u003EJen:\u003C\u002Fstrong\u003E\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\u003Cp\u003E\u003Cspan style=\"background-color:transparent;color:#000000;\"\u003EWelcome everyone to our new AMA session about the Move programming language. We have here with us today our lovely Mysten engineers, Adam and Todd. Please introduce yourselves.\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\u003Cp\u003E\u003Cspan style=\"background-color:transparent;color:#000000;\"\u003E\u003Cstrong\u003EAdam:\u003C\u002Fstrong\u003E\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\u003Cp\u003E\u003Cspan style=\"background-color:transparent;color:#000000;\"\u003EMy name is Adam Welc. I've been working on the Move team at Mysten Labs for roughly seven or eight months now. My main focus is developer experience and tooling.\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\u003Cp\u003E\u003Cspan style=\"background-color:transparent;color:#000000;\"\u003E\u003Cstrong\u003ETodd:\u003C\u002Fstrong\u003E\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\u003Cp\u003E\u003Cspan style=\"background-color:transparent;color:#000000;\"\u003EI'm Todd Nowacki. I've been on Move almost since its inception. It's been a small team the whole time and a lot of us have just kind of worked on whatever was the highest priority thing at the time. The biggest chunk of that was the compiler and the source language. Lately, at Mysten Labs, I've been working more on getting the language integrated into a more Sui-specific styling of Move.\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\u003Cp style=\"text-align:center;\"\u003E. &nbsp; . &nbsp; .\u003C\u002Fp\u003E\u003Ch4\u003E\u003Cspan style=\"background-color:transparent;color:#000000;\"\u003E\u003Cstrong\u003EQuestion #1: How is the Move team planning to onboard more devs and accelerate developer adoption of the Move language, especially considering the fact that it is a new language?\u003C\u002Fstrong\u003E\u003C\u002Fspan\u003E\u003C\u002Fh4\u003E\u003Cp\u003E\u003Cspan style=\"background-color:transparent;color:#000000;\"\u003E\u003Cstrong\u003EAdam:\u003C\u002Fstrong\u003E\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\u003Cp\u003E\u003Cspan style=\"background-color:transparent;color:#000000;\"\u003EWe launched an initiative to carry out hackathons and workshops; some of them were held in Korea but there is a plan to do those in different parts of the world virtually and physically. We're really trying to boost awareness of the language and its features this way.\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\u003Cp\u003E\u003Cspan style=\"background-color:transparent;color:#000000;\"\u003EAnother aspect of this is that the language was created at Meta but is now used throughout multiple different chains and Mysten Labs’ Sui chain is one of them. There's a bit of a community effort that will come not only from Mysten Labs but also hopefully from other companies to make it popular.\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\u003Cp\u003E\u003Cspan style=\"background-color:transparent;color:#000000;\"\u003E\u003Cstrong\u003ETodd:\u003C\u002Fstrong\u003E\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\u003Cp\u003E\u003Cspan style=\"background-color:transparent;color:#000000;\"\u003EThe only thing I’ll add briefly to it is that the space is still rather young and small and these things take time to build. For the learning resources, we're trying to build awareness. If you have any feedback about the \u003C\u002Fspan\u003E\u003Ca href=\"https:\u002F\u002Fmove-book.com\u002F\"\u003E\u003Cu\u003EMove book\u003C\u002Fu\u003E\u003C\u002Fa\u003E or what \u003Ca href=\"https:\u002F\u002Fmove-language.github.io\u002Fmove\u002F\"\u003E\u003Cu\u003EDamir wrote for the repo\u003C\u002Fu\u003E\u003C\u002Fa\u003E\u003Cspan style=\"background-color:transparent;color:#000000;\"\u003E, please let us know! Feedback like that is really helpful.&nbsp;\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\u003Cp\u003E\u003Cspan style=\"background-color:transparent;color:#000000;\"\u003E\u003Cstrong\u003EJen:\u003C\u002Fstrong\u003E\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\u003Cp\u003E\u003Cspan style=\"background-color:transparent;color:#000000;\"\u003EIn regards to what Adam was saying, we do have many more events planned to onboard developers across various skill sets. We're fully aware that a lot of people have a keen interest, and we've made it a point internally to look at virtual workshops plus in-person ones. We've received an overwhelming response to get more video-focused content and that is something that we're working through at this moment. We really appreciate that people have flagged this as something that they need and we're looking to respond in terms of how we can provide these resources.&nbsp;\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\u003Cp style=\"text-align:center;\"\u003E. &nbsp; . &nbsp; .\u003C\u002Fp\u003E\u003Ch4\u003E\u003Cspan style=\"background-color:transparent;color:#000000;\"\u003E\u003Cstrong\u003EQuestion #2: How can Sui Move guarantee the security of assets in a way that other traditional blockchains simply can't?\u003C\u002Fstrong\u003E\u003C\u002Fspan\u003E\u003C\u002Fh4\u003E\u003Cp\u003E\u003Cspan style=\"background-color:transparent;color:#000000;\"\u003E\u003Cstrong\u003EAdam:\u003C\u002Fstrong\u003E\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\u003Cp\u003E\u003Cspan style=\"background-color:transparent;color:#000000;\"\u003EMove is an evolution of ideas that were present in the first generation of smart contract languages. So, it's similar to evolution in terms of thinking about safety and security changes that happened between when C and even C++ languages were developed and implemented and now when we have languages like Go or Rust.\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\u003Cp\u003E\u003Cspan style=\"background-color:transparent;color:#000000;\"\u003EIn the old days, it was like “Oh, you have to be really careful if you program as threads to avoid races or deadlocks.” Rust took a completely different approach in that department; they basically said we will design a language so that if you write a program, our compiler accepts its program. A certain class of errors is just not going to be present in your program by definition or by design. For example, if you write a concurrent program in Rust and it compiles, you will not be able to deallocate memory and then reuse it incorrectly as you could have in C or C++.\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\u003Cp\u003E\u003Cspan style=\"background-color:transparent;color:#000000;\"\u003ESo Move tried to go in the same direction as Rust did with those traditional languages, which is to try and prevent some of these things by design. For example, you will not have double-spending by design, and not every property can be verified by the compiler. You have an additional tool which is called the Prover which can be used in conjunction with additional specifications that you write into your code. But if you write those specifications, you'll be able to prove other things about what your program will or will not do at runtime, but you will know these things statically before your contract is even deployed.&nbsp;\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\u003Cp\u003E\u003Cspan style=\"background-color:transparent;color:#000000;\"\u003E\u003Cstrong\u003ETodd:\u003C\u002Fstrong\u003E\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\u003Cp\u003E\u003Cspan style=\"background-color:transparent;color:#000000;\"\u003EThat was really good. The thing that I would like to add is there's a difficulty and a sort of nuance in deciding the things you don't want to allow. In the example that Adam gave about C++ versus Rust, their idea is that we want to stay kind of close to C++, but this creates a bunch of memory safety-related issues. This approach would have allowed memory unsafe code, so you would just have to wrap it up and then present it as being safe from the outside perspective. Move decided on a different approach that ensures memory safety similar to Rust.\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\u003Cp style=\"text-align:center;\"\u003E. &nbsp; . &nbsp; .\u003C\u002Fp\u003E\u003Ch4\u003E\u003Cspan style=\"background-color:transparent;color:#000000;\"\u003E\u003Cstrong\u003EQuestion #3: How do we ensure that there's safety and security built into our Sui Move language?\u003C\u002Fstrong\u003E\u003C\u002Fspan\u003E\u003C\u002Fh4\u003E\u003Cp\u003E\u003Cspan style=\"background-color:transparent;color:#000000;\"\u003E\u003Cstrong\u003ETodd:\u003C\u002Fstrong\u003E\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\u003Cp\u003E\u003Cspan style=\"background-color:transparent;color:#000000;\"\u003EFor Move, it's kind of like an all-or-nothing thing. You either make no changes to the blockchain, except for being charged gas and the failure or you have a successful change over storage. In Sui terms, it would be that you're taking some objects as input and you're either producing some new objects or transferring the objects or otherwise mutating them or you do nothing. I know that sounds very simple but this sort of all-or-nothing behavior rules out a lot of bugs because you don't have to worry about manually managing the memory of these changes.\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\u003Cp\u003E\u003Cspan style=\"background-color:transparent;color:#000000;\"\u003EThe prover starts to come in when you want to define broader logical properties about your program like this function will never fail if the values on the inputs are greater than zero. That can be helpful to know as long as you pass in enough coins or tokens to the function it is impossible to fail or maybe, if you authenticate your keys correctly for this function, then you'll never fail.&nbsp;\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\u003Cp\u003E\u003Cspan style=\"background-color:transparent;color:#000000;\"\u003E\u003Cstrong\u003EAdam:\u003C\u002Fstrong\u003E\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\u003Cp\u003E\u003Cspan style=\"background-color:transparent;color:#000000;\"\u003ESo to speak from the language perspective, sometimes locally, it's tough to tell if an object that you're seeing is shared or it's owned and I think prover can help make sure that if your function expects a shared object, it will be a shared object that is going to be passed on to it or if there is a non-shared object that is passed. Then you can define similar properties that Todd mentioned, but with respect to the properties of objects that can be checked non-locally as well.\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\u003Cp\u003E\u003Cspan style=\"background-color:transparent;color:#000000;\"\u003E\u003Cstrong\u003ETodd:\u003C\u002Fstrong\u003E\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\u003Cp\u003E\u003Cspan style=\"background-color:transparent;color:#000000;\"\u003EWhen I was talking earlier, we will continue to develop the language and learn new things and make changes as time goes on. One of the first things that we did in Move was set up the core Move account-based storage model but there are some downsides to this that became very different. Let's say that all of your coins are managed by this one coin module, you don't know if there is any module above it calling into this coin module. So you don’t know if someone can call this function and steal all of your coins. And when we tried a few different ways of solving this, nothing was that great. But in the Sui object model, we actually force you into presenting all of the objects you're going to modify at the time of execution. So when you begin execution, you can carve out whole regions of memory and say, I'm only going to write or modify within this region.&nbsp;\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\u003Cp\u003E\u003Cspan style=\"background-color:transparent;color:#000000;\"\u003EThese are another set of guarantees, it just makes it a lot easier and a lot more understandable to understand what exactly Move functions are doing and Sui Move compared to core Move.\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\u003Cp style=\"text-align:center;\"\u003E. &nbsp; . &nbsp; .\u003C\u002Fp\u003E\u003Ch4\u003E\u003Cspan style=\"background-color:transparent;color:#000000;\"\u003E\u003Cstrong\u003EQuestion #4: Can you share with us some context and background around the VS Code plugin?\u003C\u002Fstrong\u003E\u003C\u002Fspan\u003E\u003C\u002Fh4\u003E\u003Cp\u003E\u003Cspan style=\"background-color:transparent;color:#000000;\"\u003E\u003Cstrong\u003EAdam:\u003C\u002Fstrong\u003E\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\u003Cp\u003E\u003Cspan style=\"background-color:transparent;color:#000000;\"\u003EWe had a fairly rudimentary VS code plugin that has been developed at Meta by one of the original team members. When I came on board to Mysten, I kind of realized that it's not quite up to scratch, and if somebody is used to working with more traditional languages they're not going to be super happy with the developer experience. So initially, we just embarked on the task of supplying the VS code plugin with some of the features that you would want and expect from a more modern IDE. So things like going to a type definition, finding all the references typed on hover, and passing compiler diagnostics back to the editors.&nbsp;\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\u003Cp style=\"text-align:center;\"\u003E. &nbsp; . &nbsp; .\u003C\u002Fp\u003E\u003Ch4\u003E\u003Cspan style=\"background-color:transparent;color:#000000;\"\u003E\u003Cstrong\u003EQuestion #5: What is the impact that VS code plugin will have on the coding experience and developer teams?\u003C\u002Fstrong\u003E\u003C\u002Fspan\u003E\u003C\u002Fh4\u003E\u003Cp\u003E\u003Cspan style=\"background-color:transparent;color:#000000;\"\u003E\u003Cstrong\u003EAdam:\u003C\u002Fstrong\u003E\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\u003Cp\u003E\u003Cspan style=\"background-color:transparent;color:#000000;\"\u003EI got some reports that people actually started using the new features, which is nice. There was a workshop in Korea where Damir, our developer advocate and part of the Move core team was there in person running the workshop and working with people, and he kind of passed back the more informal feedback on this, which was that people actually use it and they liked it.\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\u003Cp\u003E\u003Cspan style=\"background-color:transparent;color:#000000;\"\u003E\u003Cstrong\u003ETodd:\u003C\u002Fstrong\u003E\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\u003Cp\u003E\u003Cspan style=\"background-color:transparent;color:#000000;\"\u003EI think that's probably going to be a different tool. I could imagine different sets of tools down the road that would make it easier to understand. Maybe how specifications are applied, what sort of coverage you're getting by certain things, or some other way of making the coding experience feel different than the developer experience. It's more like ‘‘I'm writing this function, what's the signature of this other function again, or do I want to see the code over here?’’ I guess the definition is probably the most helpful for non-developers if you're not used to a given code base. The code definition is amazing.\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\u003Cp\u003E\u003Cspan style=\"background-color:transparent;color:#000000;\"\u003EAt the end of the day, if you're thinking about others, making their life easier or other sorts of non-technical people looking at Move code, you're probably going to want a different set of tools to help them.&nbsp;\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\u003Cp style=\"text-align:center;\"\u003E. &nbsp; . &nbsp; .\u003C\u002Fp\u003E\u003Ch4\u003E\u003Cspan style=\"background-color:transparent;color:#000000;\"\u003E\u003Cstrong\u003EQuestion #6: What are some external contributions that people might want to look at?\u003C\u002Fstrong\u003E\u003C\u002Fspan\u003E\u003C\u002Fh4\u003E\u003Cp\u003E\u003Cspan style=\"background-color:transparent;color:#000000;\"\u003E\u003Cstrong\u003EAdam:\u003C\u002Fstrong\u003E\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\u003Cp\u003E\u003Cspan style=\"background-color:transparent;color:#000000;\"\u003EI can speak to those that have already contributed and who are part of the VS code plugin extension already. So, if you go and look for issues with the Move analyzer tag in the Move repository, you will be able to see things that we plan to do and that we will do either ourselves or with the help of the community in more detail.&nbsp;\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\u003Cp\u003E\u003Cspan style=\"background-color:transparent;color:#000000;\"\u003ERemember that the VS code plugin extension happened recently – people only started picking up on what has been added there, which is the support for these additional features, that were allowed by a tighter compiler integration, which builds intermediate representation that lets you kind of do smarter things at the editor level.&nbsp;\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\u003Cp\u003E\u003Cspan style=\"background-color:transparent;color:#000000;\"\u003EThis allowed some additional things to happen and one of those external contributions was to provide an outline view of the file that you were editing. If you're familiar with the VS code editor in general, it's on the left hand side there is a window that if you open it to this outline, it should show functions, type definitions, and the main outline of the source code that’s defined in the file. This has been added by one of the external contributors.\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\u003Cp style=\"text-align:center;\"\u003E. &nbsp; . &nbsp; .\u003C\u002Fp\u003E\u003Ch4\u003E\u003Cspan style=\"background-color:transparent;color:#000000;\"\u003E\u003Cstrong\u003EQuestion #7: What are the plans for Move’s ability to write generic code?\u003C\u002Fstrong\u003E\u003C\u002Fspan\u003E\u003C\u002Fh4\u003E\u003Cp\u003E\u003Cspan style=\"background-color:transparent;color:#000000;\"\u003E\u003Cstrong\u003EJen:\u003C\u002Fstrong\u003E\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\u003Cp\u003E\u003Cspan style=\"background-color:transparent;color:#000000;\"\u003EFor example, I recently had a use case to compare two things that are generic type T, which I think you can't do trait bounds, abilities, and also passing functions around as arguments to other functions.&nbsp;\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\u003Cp\u003E\u003Cspan style=\"background-color:transparent;color:#000000;\"\u003E\u003Cstrong\u003ETodd:\u003C\u002Fstrong\u003E\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\u003Cp\u003E\u003Cspan style=\"background-color:transparent;color:#000000;\"\u003EYeah, traits, as you might expect them are function pointers that are just never coming to Move. You're probably thinking, I use higher order programming all the time, and Rust or JavaScript or pretty much any other programming language you use, why not Move? Well, it prevents a bunch of problems, and at the end of the day, Move is not a general-purpose programming language. We're trying to build safe things that we can prove to be safe and once you have dynamic dispatch, a lot of that goes out the window.&nbsp;\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\u003Cp\u003E\u003Cspan style=\"background-color:transparent;color:#000000;\"\u003EThere are a lot of different ways to reuse code that I think we're kind of used to as developers, just like reaching for that trait interface pattern, and we're trying to do things a little bit differently here so we can have a higher level of assurance and language.\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\u003Cp style=\"text-align:center;\"\u003E. &nbsp; . &nbsp; .\u003C\u002Fp\u003E\u003Ch4\u003E\u003Cspan style=\"background-color:transparent;color:#000000;\"\u003E\u003Cstrong\u003EQuestion #8: Is Move EVM compatible or is it going to be compatible?\u003C\u002Fstrong\u003E\u003C\u002Fspan\u003E\u003C\u002Fh4\u003E\u003Cp\u003E\u003Cspan style=\"background-color:transparent;color:#000000;\"\u003E\u003Cstrong\u003EAdam:\u003C\u002Fstrong\u003E\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\u003Cp\u003E\u003Cspan style=\"background-color:transparent;color:#000000;\"\u003EThe short answer is no, and yes. There has been an effort trying to have a cross-language solution or be able to compile or transpile Move into EVM bytecode at Meta. This was not picked up as far as I understand by any other chain that uses the language like 0x, Aptos, or Sui. I don't think there's any plan for any of these chains using Move to make it EVM compatible. The reason I think that it might have been attempted at meta was that you want to reuse the expertise that you've built in writing the language and developing code in the language and try to apply it to a wider space, particularly the original product that meta was developing in that space due to regulatory concerns; it kind of never worked out.&nbsp;\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\u003Cp\u003E\u003Cspan style=\"background-color:transparent;color:#000000;\"\u003EI think this was more about what we can do with the Move language to make it more palatable for a wider audience. The difference in the execution model and the guarantees that are offered by the EVM side of things are significant enough that I am not sure if this is ever going to work 100%. I actually also don't know if it's still being developed but at least for Mysten labs, and the Sui blockchain there is no plan to make it EVM compatible.\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\u003Cp style=\"text-align:center;\"\u003E. &nbsp; . &nbsp; .\u003C\u002Fp\u003E\u003Ch4\u003E\u003Cspan style=\"background-color:transparent;color:#000000;\"\u003E\u003Cstrong\u003EQuestion #9: Does moving to another language miss the point of resources and assets, for example, fungible versus non-fungible tokens is essentially what first-class quote unquote means in smart contracts?\u003C\u002Fstrong\u003E\u003C\u002Fspan\u003E\u003C\u002Fh4\u003E\u003Cp\u003E\u003Cspan style=\"background-color:transparent;color:#000000;\"\u003E\u003Cstrong\u003ETodd:\u003C\u002Fstrong\u003E\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\u003Cp\u003E\u003Cspan style=\"background-color:transparent;color:#000000;\"\u003EI don't quite understand the question. I'm not really sure about a few things like resources, assets and tokens are first-class baked things on Move. It's more than just the word asset, we have objects that are pretty much NFTs, even your coins are NFTs if you actually care about the idea of that coin; the fungibility aspect of it is a human concept when I care about something being fungible or not fungible this is a human level of discerning ability here. Like If I have a $1 bill in my wallet and you have a $1 bill in your wallet, you're willing to trade them because we don't care about it but if someone autographed my $1 bill, that might be important to me but not important to you. It’s Non-Fungible for me, but it's still fungible for you.&nbsp;\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\u003Cp\u003E\u003Cspan style=\"background-color:transparent;color:#000000;\"\u003E\u003Cstrong\u003EAdam:\u003C\u002Fstrong\u003E\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\u003Cp\u003E\u003Cspan style=\"background-color:transparent;color:#000000;\"\u003EWhen people use bank notes, the note is an example of a fungible token, but in fact, they are non-fungible because every one of them has a serial number so we just choose to ignore and exchange one for the other, but it's the same exact concept in Sui every coin object will have its unique ID but if you ignore them, then you basically have a fungible asset.\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\u003Cp style=\"text-align:center;\"\u003E. &nbsp; . &nbsp; .\u003C\u002Fp\u003E\u003Ch4 style=\"margin-left:0px;\"\u003E\u003Cstrong\u003ELearn more about Sui\u003C\u002Fstrong\u003E\u003C\u002Fh4\u003E\u003Cul\u003E\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fsui.io\u002F?utm_source=medium&amp;utm_medium=social&amp;utm_campaign=devnet\"\u003E\u003Cu\u003ESui Website\u003C\u002Fu\u003E\u003C\u002Fa\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fdocs.sui.io\u002F?utm_source=medium&amp;utm_medium=social&amp;utm_campaign=devnet\"\u003E\u003Cu\u003ESui Developer Portal\u003C\u002Fu\u003E\u003C\u002Fa\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fdocs.sui.io\u002Fbuild\u002Fmove?utm_source=medium&amp;utm_medium=social&amp;utm_campaign=devnet\"\u003E\u003Cu\u003EMove Programming Language\u003C\u002Fu\u003E\u003C\u002Fa\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fsui.io\u002Fwhitepaper\"\u003E\u003Cu\u003ESui Whitepaper\u003C\u002Fu\u003E\u003C\u002Fa\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fdiscord.gg\u002Fsui\"\u003E\u003Cu\u003ECommunity forums\u003C\u002Fu\u003E\u003C\u002Fa\u003E\u003C\u002Fli\u003E\u003C\u002Ful\u003E\u003Ch4 style=\"margin-left:0px;\"\u003E\u003Cstrong\u003EBuild with us!!\u003C\u002Fstrong\u003E\u003C\u002Fh4\u003E\u003Cp style=\"margin-left:0px;\"\u003EWe’re excited about how the future unfolds and invite creators and builders to \u003Ca href=\"https:\u002F\u002Fdocs.sui.io\u002Fbuild?utm_source=medium&amp;utm_medium=social&amp;utm_campaign=devnet\"\u003E\u003Cu\u003Ejoin us\u003C\u002Fu\u003E\u003C\u002Fa\u003E.&nbsp;\u003C\u002Fp\u003E",pageHeroImage:g,metaImage:g,pageUrl:a,catName:d,date:"2022-10-05",catSlug:b,author:c,posts:[{title:"Recap 7\u002F28 Sui AMA: Move Programming Language",link:"recap-sui-ama-move-programming-language",excerpt:"Normally in a blockchain environment, all transactions are sort of ordered, even ones that aren't related. For example, Alice is sending a coin to Bob and says I am also sending some coins to Adam and Emma, those transactions aren't related but in a normal blockchain, you have to wait for all of them to go through consensus in the same order. It’s just kind of silly, so in Sui, we have this object model that lets us know if those operations are related or not so we can run them in parallel and in the original form of Move. To add on top of that, we also have different ownership models and different storage models that will also provide additional security over ownership. So, if you own something, no one can take it from you.",date:"2022-09-01",heroImage:e,image:e,categoryName:d,catRoute:[b],catId:a,author:c},{title:"Recap 7\u002F14 Sui AMA: Move Programming Language with Mysten Dev Team",link:"recap-sui-mysten-dev-team",excerpt:"I think what's unique about Move is that it brings interesting things (that have been done) from the world of smart contracts languages that are around other than Solidity. It also brings some very interesting concepts from more traditional programming languages. For example, the way the assets are encoded in Move is different than it has been traditionally done as far as I understand. Every time you create in Move, you essentially create an NFT with all the rich properties that you can modify. Move has been designed around this concept of being able to share code easily, which is why we integrated this concept of packages and modules. This allows you to write and publish source code somewhere that people kind of know what they're seeing on the chain, but then you don't have to copy and paste. There's this kind of notion of the language being both expressive enough, but also minimal enough that it helps with finding bugs and writing tools. ",date:"2022-08-29",heroImage:e,image:e,categoryName:d,catRoute:[b],catId:a,author:c},{title:"Meet the Sui Explorer",link:"meet-the-sui-explorer",excerpt:"Sui's emergence as a game-changing layer one amidst a burgeoning sea of pre-existing blockchains signal a new era of web3 infrastructure. This new era is made possible by Sui's mission to provide the infrastructure that will support the development of a wide range of applications, from dynamic games to secure DeFi protocols, all with unrivaled speed and incredibly low cost. \n\nAs part of Sui’s vision to create infrastructure to support the developers on-boarding the next billion users  to web3, we released the Sui Explorer to act as a trusted transparency tool for Sui users and builders.  Explorers are an essential part of any L1 platform, serving as inspection and analytics tools for users and developers to troubleshoot, confirm their activities and verify holdings on-chain.",date:"2022-08-25",heroImage:h,image:h,categoryName:i,catRoute:[j,f,b,k],catId:a,author:c},{title:"Full Node & Validator Selection Announcement",link:"full-node-and-validator-selection-announcement",excerpt:"The Sui community has come to life! We have received 28,000 validator applications from more than 80 countries. We could not be more excited to see this level of engagement! \n",date:"2022-08-24",heroImage:l,image:l,categoryName:i,catRoute:[j,f,b,k],catId:a,author:c},{title:"Recap 6\u002F30 Sui AMA: Move Programming Language with Sam Blackshear",link:"recap-sui-with-sam-blackshear",excerpt:"So, we actually don't use a custom variant of Move. The nature of Move is an interesting language. We've intentionally designed it as this cross platform language where there's a core language that isn't specific to any blockchain. It has things like strux, booleans, integers and addresses, but it doesn't have a notion of accounts, transactions, the cryptography that's used by a given platform, or the consensus that's used by a given platform – all these things are abstracted away.",date:"2022-07-27",heroImage:m,image:m,categoryName:d,catRoute:[b],catId:a,author:c},{title:"Why We Created Sui Move",link:"why-we-created-sui-move",excerpt:"Move is a cross-platform, embedded language. The core language itself is very simple: it has generic concepts like structs, integers, and addresses, but does not have blockchain-specific concepts like accounts, transactions, time, cryptography, etc. These features must be provided by the blockchain platform that integrates Move. Importantly, these blockchains do not need their own fork of Move—each platform uses the same Move VM, bytecode verifier, compiler, prover, package manager, and CLI, but adds blockchain-specific features via code that builds on top of these core components. ",date:"2022-07-12",heroImage:"https:\u002F\u002Fstorage.googleapis.com\u002Fsui-cms-content\u002FTwitter_post_12_61a41e329c\u002FTwitter_post_12_61a41e329c.png",image:"https:\u002F\u002Fstorage.googleapis.com\u002Fsui-cms-content\u002FTwitter_post_12_1_c20108ee19\u002FTwitter_post_12_1_c20108ee19.png",categoryName:d,catRoute:[b],catId:a,author:"Sam Blackshear"},{title:"Announcing Enhanced Move VSCode Plugin",link:"announcing-enhanced-move-vs-code-plugin",excerpt:"The VSCode plugin for Move is called move-analyzer and it is available in the Visual Studio Marketplace. The new features are supported via the Language Server Protocol; in order to unleash the full potential of the plugin, in addition to installing the plugin itself, you also need to install move-analyzer’s language server as described in installation instructions provided with the plugin distribution.",date:"2022-07-05",heroImage:n,image:n,categoryName:d,catRoute:[b],catId:a,author:c},{title:"Announcing Sui Tokenomics",link:"announcing-sui-tokenomics",excerpt:"Today, we are equally excited to share the design of Sui’s economics and incentives — also known as Sui’s tokenomics. In the same spirit of Sui’s engineering design, Sui’s economic model has been designed at the frontier of blockchain economic and incentives research. The overarching goal has been to implement an economic system aligning incentives across the various entities participating in the Sui ecosystem. The aim is for Sui’s financial plumbing to be at par with its engineering design so that our smart contracts platform delivers a flourishing economy with billions of participants.",date:"2022-05-24",heroImage:o,image:o,categoryName:"Tokenomics, Move",catRoute:[f,b],catId:a,author:c}]}],fetch:{},mutations:[]}}(void 0,"resources-move","Mysten Labs","Move","https:\u002F\u002Fstorage.googleapis.com\u002Fsui-cms-content\u002FMove_AMA_e5071cf7d1\u002FMove_AMA_e5071cf7d1.gif","resources-tokenomics","https:\u002F\u002Fstorage.googleapis.com\u002Fsui-cms-content\u002FMove_Programming_AMA_2_a3034611ac\u002FMove_Programming_AMA_2_a3034611ac.gif","https:\u002F\u002Fstorage.googleapis.com\u002Fsui-cms-content\u002FSui_Explorer_f5c383be2f\u002FSui_Explorer_f5c383be2f.png","Narwhal & Tusk, Tokenomics, Move, Sui","resources-narwhal-tusk","resources-sui","https:\u002F\u002Fstorage.googleapis.com\u002Fsui-cms-content\u002FValidator_Close_06640a57be\u002FValidator_Close_06640a57be.png","https:\u002F\u002Fstorage.googleapis.com\u002Fsui-cms-content\u002F063022_Move_AMA_8e10aebda2\u002F063022_Move_AMA_8e10aebda2.gif","https:\u002F\u002Fstorage.googleapis.com\u002Fsui-cms-content\u002FEnhanced_VS_Code_8c11327fe8\u002FEnhanced_VS_Code_8c11327fe8.png","https:\u002F\u002Fstorage.googleapis.com\u002Fsui-cms-content\u002FSui_Tokenomics_8e646e8727\u002FSui_Tokenomics_8e646e8727.png")));