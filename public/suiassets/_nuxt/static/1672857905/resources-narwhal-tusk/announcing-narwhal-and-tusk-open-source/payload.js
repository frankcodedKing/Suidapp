__NUXT_JSONP__("/resources-narwhal-tusk/announcing-narwhal-and-tusk-open-source", (function(a,b,c,d,e,f,g,h,i,j){return {data:[{pageTitle:"Announcing Narwhal & Tusk Open Source",excerpt:"Mysten Labs is open-sourcing Narwhal & Tusk, our high-throughput mempool and consensus engine. Narwhal & Tusk represents the latest variant of decades of work on multi-proposer, high-throughput consensus algorithms that reaches throughputs more than 130,000 transactions per second on a WAN, with production cryptography, permanent storage, and a scaled-out primary-worker architecture.",pageContent:"\u003Cp style=\"margin-left:0px;\"\u003EMysten Labs is open-sourcing Narwhal &amp; Tusk, our high-throughput mempool and consensus engine.\u003C\u002Fp\u003E\u003Cp style=\"margin-left:0px;\"\u003E\u003Ca href=\"https:\u002F\u002Fdocs.sui.io\u002Flearn\u002Farchitecture\u002Fconsensus?utm_source=medium&amp;utm_medium=social&amp;utm_campaign=opensource\"\u003E\u003Cu\u003ENarwhal &amp; Tusk (N\u002FT)\u003C\u002Fu\u003E\u003C\u002Fa\u003E powers critical aspects of our smart contracts platform \u003Ca href=\"https:\u002F\u002Fsui.io\u002F\"\u003E\u003Cu\u003ESui\u003C\u002Fu\u003E\u003C\u002Fa\u003E:\u003C\u002Fp\u003E\u003Cul\u003E\u003Cli\u003Eordering all transactions involving shared objects using a consensus protocol\u003C\u002Fli\u003E\u003Cli\u003Ecomposing the protocol dealing with owned objects with the protocol\u003C\u002Fli\u003E\u003Cli\u003Esequencing the transaction to guarantee Sui’s security properties\u003C\u002Fli\u003E\u003C\u002Ful\u003E\u003Cp style=\"margin-left:0px;\"\u003EThe dual name highlights that the system splits the responsibilities of:\u003C\u002Fp\u003E\u003Cul\u003E\u003Cli\u003EEnsuring the availability of data submitted to consensus (Narwhal)\u003C\u002Fli\u003E\u003Cli\u003EAgreeing on a specific ordering of this data (Tusk)\u003C\u002Fli\u003E\u003C\u002Ful\u003E\u003Cp style=\"margin-left:0px;\"\u003ENarwhal &amp; Tusk represents the latest variant of decades of work on multi-proposer, high-throughput consensus algorithms that reaches throughputs more than 130,000 transactions per second on a WAN, with production cryptography, permanent storage, and a scaled-out primary-worker architecture.\u003C\u002Fp\u003E\u003Ch2 style=\"margin-left:0px;\"\u003E\u003Cstrong\u003EWhy are we open sourcing?\u003C\u002Fstrong\u003E\u003C\u002Fh2\u003E\u003Cp style=\"margin-left:0px;\"\u003EIt was clear that we were discussing ideas, problems and solutions that resonate with developers in regards to scalability within web3. We hope that by sharing Narwhal &amp; Tusk, we are able to bring our learnings forward and help accelerate likeminded teams.\u003C\u002Fp\u003E\u003Cp style=\"margin-left:0px;\"\u003EOur experience talking with peers across the industry indicates that teams are looking for some of the same technologies within our high-throughput mempool and consensus. By sharing the code as open source, we hope others can help the overall web3 community reuse those technologies; in fact, we’re looking forward to the concepts and features in Narwhal &amp; Tusk to land in other scalability solutions. We will be using Narwhal &amp; Tusk as part of Sui.\u003C\u002Fp\u003E\u003Cp style=\"margin-left:0px;\"\u003ELastly, open sourcing feeds our desire to give back and share with the community outside Mysten Labs. We believe this will lead to active engagements across teams who are working on similar engineering challenges.\u003C\u002Fp\u003E\u003Ch2 style=\"margin-left:0px;\"\u003E\u003Cstrong\u003EPreparing for open sourcing\u003C\u002Fstrong\u003E\u003C\u002Fh2\u003E\u003Cp style=\"margin-left:0px;\"\u003EThe codebase has been designed to be small, efficient, and easy to benchmark and modify. We’re still working on making the project ready for production, yet it already uses real cryptography (\u003Ca href=\"https:\u002F\u002Fdoc.dalek.rs\u002Fed25519_dalek\"\u003E\u003Cu\u003Eed25519\u003C\u002Fu\u003E\u003C\u002Fa\u003E &amp; other signing schemes), networking (\u003Ca href=\"https:\u002F\u002Fdocs.rs\u002Ftokio\"\u003E\u003Cu\u003Etokio\u003C\u002Fu\u003E\u003C\u002Fa\u003E), and storage (\u003Ca href=\"https:\u002F\u002Fdocs.rs\u002Frocksdb\"\u003E\u003Cu\u003Erocksdb\u003C\u002Fu\u003E\u003C\u002Fa\u003E).\u003C\u002Fp\u003E\u003Cp style=\"margin-left:0px;\"\u003EThe core protocols are written in Rust, but all benchmarking scripts are written in Python and run with \u003Ca href=\"http:\u002F\u002Fwww.fabfile.org\u002F\"\u003E\u003Cu\u003EFabric\u003C\u002Fu\u003E\u003C\u002Fa\u003E. To deploy and benchmark a testbed of four nodes on your local machine, clone the repo and install the Python dependencies:\u003C\u002Fp\u003E\u003Cspan lang=\"diff\" dir=\"undefined\"\u003E\u003Cpre\u003E\u003Ccode class=\"language-diff\"\u003E$ git clone &lt;https:\u002F\u002Fgithub.com\u002Fmystenlabs\u002Fnarwhal.git&gt;\n$ cd narwhal\u002Fbenchmark\n$ pip install -r requirements.txt\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003C\u002Fspan\u003E\u003Cp style=\"margin-left:0px;\"\u003EYou also need to install \u003Ca href=\"https:\u002F\u002Fclang.llvm.org\u002F\"\u003E\u003Cu\u003EClang\u003C\u002Fu\u003E\u003C\u002Fa\u003E (required by RocksDB) and \u003Ca href=\"https:\u002F\u002Flinuxize.com\u002Fpost\u002Fgetting-started-with-tmux\u002F#installing-tmux\"\u003E\u003Cu\u003Etmux\u003C\u002Fu\u003E\u003C\u002Fa\u003E (which runs all nodes and clients in the background). Finally, run a local benchmark using \u003Ca href=\"http:\u002F\u002Fwww.fabfile.org\u002F\"\u003E\u003Cu\u003EFabric\u003C\u002Fu\u003E\u003C\u002Fa\u003E:\u003C\u002Fp\u003E\u003Cspan lang=\"plaintext\" dir=\"undefined\"\u003E\u003Cpre\u003E\u003Ccode class=\"language-rust\"\u003E$ fab local\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003C\u002Fspan\u003E\u003Cp style=\"margin-left:0px;\"\u003EThis command may take a long time the first time you run it (compiling rust code in \u003Ccode\u003Erelease\u003C\u002Fcode\u003E mode may be slow), and you can customize a number of benchmark parameters in \u003Ca href=\"https:\u002F\u002Fgithub.com\u002Fmystenlabs\u002Fnarwhal\u002Fblob\u002Fmain\u002Fbenchmark\u002Ffabfile.py\"\u003E\u003Cu\u003Efabfile.py\u003C\u002Fu\u003E\u003C\u002Fa\u003E. When the benchmark terminates, it displays a summary of the execution similarly to the one below.\u003C\u002Fp\u003E\u003Cspan lang=\"plaintext\" dir=\"undefined\"\u003E\u003Cpre\u003E\u003Ccode class=\"language-rust\"\u003E-----------------------------------------\n SUMMARY:\n-----------------------------------------\n + CONFIG:\n Faults: 0 node(s)\n Committee size: 4 node(s)\n Worker(s) per node: 1 worker(s)\n Collocate primary and workers: True\n Input rate: 50,000 tx\u002Fs\n Transaction size: 512 B\n Execution time: 19 s Header size: 1,000 B\n Max header delay: 100 ms\n GC depth: 50 round(s)\n Sync retry delay: 10,000 ms\n Sync retry nodes: 3 node(s)\n batch size: 500,000 B\n Max batch delay: 100 ms + RESULTS:\n Consensus TPS: 46,478 tx\u002Fs\n Consensus BPS: 23,796,531 B\u002Fs\n Consensus latency: 464 ms End-to-end TPS: 46,149 tx\u002Fs\n End-to-end BPS: 23,628,541 B\u002Fs\n End-to-end latency: 557 ms\n-----------------------------------------\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003C\u002Fspan\u003E\u003Ch2 style=\"margin-left:0px;\"\u003E\u003Cstrong\u003ENext steps\u003C\u002Fstrong\u003E\u003C\u002Fh2\u003E\u003Col\u003E\u003Cli\u003ERead the \u003Ca href=\"https:\u002F\u002Fgithub.com\u002FMystenLabs\u002Fnarwhal#readme\"\u003E\u003Cu\u003ENarwhal and Tusk README\u003C\u002Fu\u003E\u003C\u002Fa\u003E.\u003C\u002Fli\u003E\u003Cli\u003ERead the paper \u003Ca href=\"https:\u002F\u002Farxiv.org\u002Fpdf\u002F2105.11827.pdf\"\u003E\u003Cu\u003ENarwhal and Tusk: A DAG-based Mempool and Efficient BFT Consensus\u003C\u002Fu\u003E\u003C\u002Fa\u003E.\u003C\u002Fli\u003E\u003Cli\u003ERecommended to have a look at the README files of the \u003Ca href=\"https:\u002F\u002Fgithub.com\u002Fmystenlabs\u002Fnarwhal\u002Ftree\u002Fmain\u002Fworker\"\u003E\u003Cu\u003Eworker\u003C\u002Fu\u003E\u003C\u002Fa\u003E and \u003Ca href=\"https:\u002F\u002Fgithub.com\u002Fmystenlabs\u002Fnarwhal\u002Ftree\u002Fmain\u002Fprimary\"\u003E\u003Cu\u003Eprimary\u003C\u002Fu\u003E\u003C\u002Fa\u003E crates.\u003C\u002Fli\u003E\u003Cli\u003EAn additional resource to better understand the Tusk consensus protocol is the paper \u003Ca href=\"https:\u002F\u002Farxiv.org\u002Fabs\u002F2102.08325\"\u003E\u003Cu\u003EAll You Need is DAG\u003C\u002Fu\u003E\u003C\u002Fa\u003E as it describes a similar protocol.\u003C\u002Fli\u003E\u003Cli\u003EThe README file of the \u003Ca href=\"https:\u002F\u002Fgithub.com\u002Fmystenlabs\u002Fnarwhal\u002Ftree\u002Fmain\u002Fbenchmark\"\u003E\u003Cu\u003Ebenchmark folder\u003C\u002Fu\u003E\u003C\u002Fa\u003E explains how to benchmark the codebase and read benchmarks’ results. It also provides a step-by-step tutorial to run benchmarks on \u003Ca href=\"https:\u002F\u002Faws.amazon.com\u002F\"\u003E\u003Cu\u003EAmazon Web Services (AWS)\u003C\u002Fu\u003E\u003C\u002Fa\u003E across multiple data centers (WAN).\u003C\u002Fli\u003E\u003C\u002Fol\u003E\u003Ch2 style=\"margin-left:0px;\"\u003E\u003Cstrong\u003EFurther reading\u003C\u002Fstrong\u003E\u003C\u002Fh2\u003E\u003Cp style=\"margin-left:0px;\"\u003ENarwhal and Tusk (Danezis et al. 2021) is a consensus system leveraging directed acyclic graphs (DAG). DAG-based consensus has been developed over the last 30 years, and some of the history is summarized in (Wang &amp; al. 2020). The closest theoretical ancestor of Narwhal &amp; Tusk is (Keidar &amp; al. 2021).\u003C\u002Fp\u003E\u003Cp style=\"margin-left:0px;\"\u003ENarwhal &amp; Tusk are developed in the \u003Ca href=\"https:\u002F\u002Fdecentralizedthoughts.github.io\u002F2019-06-01-2019-5-31-models\u002F\"\u003E\u003Cu\u003Easynchronous model\u003C\u002Fu\u003E\u003C\u002Fa\u003E. A partially synchronous variant of Narwhal and Tusk, called Bullshark, is presented in (Giridharan 2022).\u003C\u002Fp\u003E\u003Cp style=\"margin-left:0px;\"\u003ENarwhal and Tusk started \u003Ca href=\"https:\u002F\u002Fgithub.com\u002Ffacebookresearch\u002Fnarwhal\"\u003E\u003Cu\u003Eas a research prototype\u003C\u002Fu\u003E\u003C\u002Fa\u003E at Facebook Novi.\u003C\u002Fp\u003E\u003Ch2 style=\"margin-left:0px;\"\u003E\u003Cstrong\u003EAppendix\u003C\u002Fstrong\u003E\u003C\u002Fh2\u003E\u003Cul\u003E\u003Cli\u003EDanezis, G., Kogias, E. K., Sonnino, A., &amp; Spiegelman, A. (2021). Narwhal and Tusk: A DAG-based Mempool and Efficient BFT Consensus. ArXiv:2105.11827 [Cs]. \u003Ca href=\"http:\u002F\u002Farxiv.org\u002Fabs\u002F2105.11827\"\u003E\u003Cu\u003Ehttp:\u002F\u002Farxiv.org\u002Fabs\u002F2105.11827\u003C\u002Fu\u003E\u003C\u002Fa\u003E\u003C\u002Fli\u003E\u003Cli\u003EGiridharan, N., Kokoris-Kogias, L., Sonnino, A., &amp; Spiegelman, A. (2022). Bullshark: DAG BFT Protocols Made Practical. ArXiv:2201.05677 [Cs]. \u003Ca href=\"http:\u002F\u002Farxiv.org\u002Fabs\u002F2201.05677\"\u003E\u003Cu\u003Ehttp:\u002F\u002Farxiv.org\u002Fabs\u002F2201.05677\u003C\u002Fu\u003E\u003C\u002Fa\u003E\u003C\u002Fli\u003E\u003Cli\u003EKeidar, I., Kokoris-Kogias, E., Naor, O., &amp; Spiegelman, A. (2021). All You Need is DAG. ArXiv:2102.08325 [Cs]. \u003Ca href=\"http:\u002F\u002Farxiv.org\u002Fabs\u002F2102.08325\"\u003E\u003Cu\u003Ehttp:\u002F\u002Farxiv.org\u002Fabs\u002F2102.08325\u003C\u002Fu\u003E\u003C\u002Fa\u003E\u003C\u002Fli\u003E\u003Cli\u003EWang, Q., Yu, J., Chen, S., &amp; Xiang, Y. (2020). SoK: Diving into DAG-based Blockchain Systems. ArXiv:2012.06128 [Cs]. \u003Ca href=\"http:\u002F\u002Farxiv.org\u002Fabs\u002F2012.06128\"\u003E\u003Cu\u003Ehttp:\u002F\u002Farxiv.org\u002Fabs\u002F2012.06128\u003C\u002Fu\u003E\u003C\u002Fa\u003E\u003C\u002Fli\u003E\u003C\u002Ful\u003E\u003Ch2 style=\"margin-left:0px;\"\u003E\u003Cstrong\u003ELearn more about Sui\u003C\u002Fstrong\u003E\u003C\u002Fh2\u003E\u003Cul\u003E\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fsui.io\u002F\"\u003E\u003Cu\u003ESui Website\u003C\u002Fu\u003E\u003C\u002Fa\u003E — \u003Ca href=\"https:\u002F\u002Fsui.io\u002F\"\u003E\u003Cu\u003Ehttps:\u002F\u002Fsui.io\u002F\u003C\u002Fu\u003E\u003C\u002Fa\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fdocs.sui.io\u002F\"\u003E\u003Cu\u003ESui Developer Portal\u003C\u002Fu\u003E\u003C\u002Fa\u003E — \u003Ca href=\"https:\u002F\u002Fdocs.sui.io\u002F\"\u003E\u003Cu\u003Ehttps:\u002F\u002Fdocs.sui.io\u002F\u003C\u002Fu\u003E\u003C\u002Fa\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fdocs.sui.io\u002Fbuild\u002Fmove\"\u003E\u003Cu\u003EMove Programming Language\u003C\u002Fu\u003E\u003C\u002Fa\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fsui.io\u002Fwhitepaper\"\u003E\u003Cu\u003ESui Whitepaper\u003C\u002Fu\u003E\u003C\u002Fa\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fdiscord.com\u002Finvite\u002Fmysten\"\u003E\u003Cu\u003ECommunity forums\u003C\u002Fu\u003E\u003C\u002Fa\u003E\u003Cu\u003E&nbsp;\u003C\u002Fu\u003E\u003C\u002Fli\u003E\u003C\u002Ful\u003E\u003Ch2 style=\"margin-left:0px;\"\u003E\u003Cstrong\u003EBuild with us!\u003C\u002Fstrong\u003E\u003C\u002Fh2\u003E\u003Cp style=\"margin-left:0px;\"\u003EWe are super excited about what the future unfolds and invite creators and builders to \u003Ca href=\"https:\u002F\u002Fdocs.sui.io\u002Fbuild\"\u003E\u003Cu\u003Ejoin us\u003C\u002Fu\u003E\u003C\u002Fa\u003E.\u003C\u002Fp\u003E",pageHeroImage:d,metaImage:d,pageUrl:a,catName:"Narwhal & Tusk",date:"2022-04-20",catSlug:b,author:c,posts:[{title:"Meet the Sui Explorer",link:"meet-the-sui-explorer",excerpt:"Sui's emergence as a game-changing layer one amidst a burgeoning sea of pre-existing blockchains signal a new era of web3 infrastructure. This new era is made possible by Sui's mission to provide the infrastructure that will support the development of a wide range of applications, from dynamic games to secure DeFi protocols, all with unrivaled speed and incredibly low cost. \n\nAs part of Sui’s vision to create infrastructure to support the developers on-boarding the next billion users  to web3, we released the Sui Explorer to act as a trusted transparency tool for Sui users and builders.  Explorers are an essential part of any L1 platform, serving as inspection and analytics tools for users and developers to troubleshoot, confirm their activities and verify holdings on-chain.",date:"2022-08-25",heroImage:e,image:e,categoryName:f,catRoute:[b,g,h,i],catId:a,author:c},{title:"Full Node & Validator Selection Announcement",link:"full-node-and-validator-selection-announcement",excerpt:"The Sui community has come to life! We have received 28,000 validator applications from more than 80 countries. We could not be more excited to see this level of engagement! \n",date:"2022-08-24",heroImage:j,image:j,categoryName:f,catRoute:[b,g,h,i],catId:a,author:c}]}],fetch:{},mutations:[]}}(void 0,"resources-narwhal-tusk","Mysten Labs","https:\u002F\u002Fstorage.googleapis.com\u002Fsui-cms-content\u002Fannounce_open_source_narwhal_tusk_0c35b2758e\u002Fannounce_open_source_narwhal_tusk_0c35b2758e.jpg","https:\u002F\u002Fstorage.googleapis.com\u002Fsui-cms-content\u002FSui_Explorer_f5c383be2f\u002FSui_Explorer_f5c383be2f.png","Narwhal & Tusk, Tokenomics, Move, Sui","resources-tokenomics","resources-move","resources-sui","https:\u002F\u002Fstorage.googleapis.com\u002Fsui-cms-content\u002FValidator_Close_06640a57be\u002FValidator_Close_06640a57be.png")));